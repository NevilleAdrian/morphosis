[{"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/index.js":"1","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/App.js":"2","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/views/home/index.js":"3","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/Body/index.js":"4","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/NavBar/index.js":"5","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/store/actions/currency.js":"6","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/mockdata/index.js":"7","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/reportWebVitals.js":"8","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/store/reducers/index.js":"9","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/store/reducers/currency.js":"10","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/views/Home/index.js":"11","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/utils.js":"12","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/body/index.js":"13","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/navbar/index.js":"14","/Users/USER/Robot-Market/frontend/src/index.js":"15","/Users/USER/Robot-Market/frontend/src/App.js":"16","/Users/USER/Robot-Market/frontend/src/reportWebVitals.js":"17","/Users/USER/Robot-Market/frontend/src/views/home/index.js":"18","/Users/USER/Robot-Market/frontend/src/components/body/index.js":"19","/Users/USER/Robot-Market/frontend/src/utils.js":"20","/Users/USER/Robot-Market/frontend/src/components/navbar/index.js":"21","/Users/USER/Robot-Market/frontend/src/components/mockdata/index.js":"22"},{"size":744,"mtime":1626184006906,"results":"23","hashOfConfig":"24"},{"size":153,"mtime":1626185531704,"results":"25","hashOfConfig":"24"},{"size":168,"mtime":1626185511986,"results":"26","hashOfConfig":"24"},{"size":4353,"mtime":1626185447201,"results":"27","hashOfConfig":"24"},{"size":7095,"mtime":1626184006906,"results":"28","hashOfConfig":"24"},{"size":103,"mtime":1626184006907,"results":"29","hashOfConfig":"24"},{"size":1523,"mtime":1626184006906,"results":"30","hashOfConfig":"24"},{"size":362,"mtime":1626184006907,"results":"31","hashOfConfig":"24"},{"size":181,"mtime":1626184006907,"results":"32","hashOfConfig":"24"},{"size":225,"mtime":1626184006907,"results":"33","hashOfConfig":"24"},{"size":168,"mtime":1626185447953,"results":"34","hashOfConfig":"24"},{"size":65,"mtime":1626191560905,"results":"35","hashOfConfig":"24"},{"size":6551,"mtime":1626205892965,"results":"36","hashOfConfig":"24"},{"size":6877,"mtime":1626205974556,"results":"37","hashOfConfig":"24"},{"size":460,"mtime":1626211364082,"results":"38","hashOfConfig":"39"},{"size":153,"mtime":1626206816778,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1626206816787,"results":"41","hashOfConfig":"39"},{"size":168,"mtime":1626206816790,"results":"42","hashOfConfig":"39"},{"size":6940,"mtime":1668549718123,"results":"43","hashOfConfig":"39"},{"size":65,"mtime":1626206816789,"results":"44","hashOfConfig":"39"},{"size":6564,"mtime":1668549821801,"results":"45","hashOfConfig":"39"},{"size":1523,"mtime":1626206816784,"results":"46","hashOfConfig":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"n5no0y",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"13ngmzn",{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1jhltrf","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/index.js",[],["101","102"],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/App.js",["103"],"import logo from './logo.svg';\nimport './App.css';\nimport Home from './views/home';\n\n\nfunction App() {\n  return (\n   <Home/>\n  );\n}\n\nexport default App;\n","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/views/home/index.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/Body/index.js",[],["104","105"],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/NavBar/index.js",["106","107","108","109"],"import React from 'react'\nimport \"./index.css\"\nimport Logo from \"../../assets/images/lumin.png\"\nimport Cart from \"../../assets/images/cart.png\"\nimport Arrow from \"../../assets/images/left-arrow.png\"\nimport X from \"../../assets/images/x.png\"\nimport { Currency } from '../mockdata'\nimport { myCurrency } from '../../store/actions/currency'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { formattedCurrency } from '../../utils'\n\n\n\n\nexport default function NavBar({ number = 0, items, increment, decrement, displayNav, showNav, remove }) {\n\n    const curr = useSelector(state => state.currency);\n\n    const dispatch = useDispatch();\n\n    //Calculate total price\n    const calculateItems = items.reduce((accumulator, current) => accumulator += current.count * current.price, 0)\n\n    return (\n        <>\n            <div className=\"nav-bottom\">\n                <nav className=\"navbar navbar-expand-lg navbar-light nav-container \">\n\n                    <img alt=\"logo\" className=\"img-fluid logo\" src={Logo} />\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item active\">\n                                <a className=\"nav-link\">Shop <span className=\"sr-only\">(current)</span></a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\">Learn</a>\n                            </li>\n                        </ul>\n                        <a className=\"nav-link pl-0\">Account</a>\n\n                        <a onClick={() => displayNav(true)} className=\"cart\">\n                            <img alt=\"cart\" className=\"cart-img\" src={Cart} />\n                            <p className=\"cart-p\">{number}</p>\n                        </a>\n                    </div>\n\n\n\n                </nav>\n\n            </div>\n          {showNav &&\n             <span>\n             <div className=\"transparent\"></div>\n         \n                 <div className={showNav ? \"overlay-fixed\" : \"overlay\"}>\n                     <div className=\"pt-3 pl-4 mb-5 pr-5\">\n                         <div className=\"row\">\n                             <div className=\"col-md-6\">\n                                 <button onClick={() => displayNav(false)} type=\"button\" className=\"trans pl-0\">\n                                     <div className=\"button-arrow\">\n                                         <img alt=\"arrow\" className=\"arrow\" src={Arrow} />\n                                     </div>\n                                 </button>\n                             </div>\n                             <div className=\"col-md-6 d-flex align-items-center\">\n                                 <p className=\"cart-text pb-0 mb-0\">YOUR CART</p>\n\n                             </div>\n\n                         </div>\n                         <div className=\"pt-3\">\n                             <select value={curr} onChange={({ target: { value } }) => dispatch(myCurrency(value))} className=\"input-dropdown\">\n                                 {Currency.map((cur) => (\n                                     <option key={cur} value={cur}>{cur}</option>\n                                 ))}\n\n                             </select>\n                         </div>\n                         <div className=\"pt-3\">\n                             {items.map((item) => (\n                                 <div key={item.id} className=\"white-bg mb-4 container-fluid\">\n                                     <div className=\"pt-3 row\">\n                                         <div className=\"col-md-6\">\n                                             <p>{item.title}</p>\n                                         </div>\n                                         <div className=\"col-md-6\">\n                                             <img onClick={() => remove(item.id)} alt=\"cancel\" className=\"img-fluid x-button  float-md-right\" src={X} />\n                                         </div>\n\n                                     </div>\n                                     <div className=\"pb-1 row\">\n                                         <div className=\"col-md-4 pt-5 \">\n                                             <form >\n                                                 <input onClick={() => decrement(item.id)} type='button' value='-' className='qtyminus' field='quantity' />\n                                                 <input type='text' name='quantity' value={item.count} className='qty' />\n                                                 <input onClick={() => increment(item.id)} type='button' value='+' className='qtyplus' field='quantity' />\n                                             </form>\n                                         </div>\n                                         <div className=\"col-md-5 pt-5 \">\n                                             <p className=\"price\">{formattedCurrency(item.price * item.count, curr)}</p>\n                                         </div>\n                                         <div className=\"col-md-3\">\n                                             <img alt=\"cancel\" className=\"img-fluid url-image float-md-left\" src={item.image_url} />\n                                         </div>\n\n                                     </div>\n                                 </div>\n                             ))}\n\n                         </div>\n                         <div className=\"pt-5\">\n                             <div className=\"top-border pt-2\">\n                                 <div className=\"row\">\n                                     <div className=\"col-md-6\">\n                                         <p className=\"float-md-left\">Subtotal</p>\n                                     </div>\n                                     <div className=\"col-md-6\">\n                                         <p className=\"float-md-right\">{formattedCurrency(calculateItems, curr)}</p>\n                                     </div>\n                                 </div>\n                             </div>\n                         </div>\n                         <div className=\"pt-2\">\n                             <button className=\"button-outline\">\n                                 MAKE THIS A SUBSCRIPTION (SAVE 20%)\n                           </button>\n                         </div>\n                         <div className=\"pt-4\">\n                             <button className=\"button-solid\">\n                                 PROCEED TO CHECKOUT\n                          </button>\n                         </div>\n                     </div>\n\n                 </div>\n\n         </span>\n\n       }\n             \n         \n        </>\n    )\n}\n","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/store/actions/currency.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/mockdata/index.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/reportWebVitals.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/store/reducers/index.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/store/reducers/currency.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/views/Home/index.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/utils.js",[],"/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/body/index.js",["110","111"],"import React from 'react'\nimport \"./index.css\"\nimport axios from 'axios'\nimport { useEffect, useState } from 'react';\nimport NavBar from '../navbar';\nimport { useSelector } from 'react-redux'\nimport { formattedCurrency } from '../../utils';\nimport dateFormat from 'dateformat';\nimport { Alert } from 'reactstrap';\nimport SweetAlert from 'react-bootstrap-sweetalert';\n\nexport default function Body() {\n\n    //Get Currency from Redux Store\n    const curr = useSelector(state => state.currency);\n\n\n\n    //Retrieve products from Robot api\n    const getProducts = () =>\n        axios.get('http://localhost:8000/api/robots')\n            .then(products => {\n                setProducts(products.data.data)\n                setFilteredProduct(products.data.data)\n            }).catch(err => console.log(err))\n\n\n    //Hooks for products\n    const [products, setProducts] = useState([])\n\n    //Hooks to filter products\n    const [filteredProduct, setFilteredProduct] = useState([])\n \n    //Call getProducts on initstate\n    useEffect(() => {\n        getProducts(curr)\n    }, [curr])\n    console.log('data', products)\n\n\n    //Initialize items in cart\n    const [cartItems, setCartItems] = useState([])\n\n    //Initialize a boolean to display Alert\n    const [alert, setAlert] = useState(false)\n\n    //Logic to increment count. display navbar and display alert if item count is greater that 5\n    const changeShow = (item) => {\n        if(cartItems.length <= 4 ){\n            increment(item)\n            displayNav(true)\n        } else {\n          setAlert(true)\n        }\n    }\n\n    useEffect(() => {\n        console.log('array', cartItems)\n    }, [cartItems])\n\n\n    //Check if cart item to be this ID\n    const isInCart = (id) => {\n        return cartItems.map(a => a.id).includes(id)\n    }\n\n\n    // Add count property to product\n    const addCountToProduct = (product) => {\n        return { ...product, count: cartItems.find(a => a.id === product.id).count }\n    }\n\n\n    //Increment individual cart item\n    const increment = (id, stock) => {\n        if (!isInCart(id)) {\n            setCartItems([...cartItems, { id, count: 1 }])\n        }\n        else {\n            setCartItems(cartItems.map(a => {\n                //if count is less than or equal to stock increment but if count exceeds stock show error\n                    if(a.count + 1 <= stock){\n                        return a.id === id  ? { ...a, count: a.count + 1 } : a\n                    } else {\n                        if(a.id === id ){\n                        setAlert(true)\n                       return  {...a, count: stock }\n                        } else {\n                          return  {...a, count: a.count }\n                        }\n\n                    }\n                       \n            }))\n        }\n    }\n\n    //remove item from product\n    const removeItem = (id) => {\n        setCartItems(cartItems.filter(a => a.id !== id))\n    }\n\n    //Decrement individual Cart Item\n    const decrement = (id) => {\n        \n        if (isInCart(id)) {\n            const cartItem = cartItems.find(item => item.id === id)\n    \n            if (cartItem.count === 1) {\n                removeItem(id)\n            }\n            else {\n                setCartItems(cartItems.map(a => a.id === id ? { ...a, count: a.count - 1 } : a))\n            }\n        }\n\n    }\n\n    const [showNav, setShowNav] = useState(false)\n\n\n    //Display sidebar\n    const displayNav = (shouldShow) => {\n        if (shouldShow) {\n            document.body.style.overflow = \"hidden\";\n        }\n        else {\n            document.body.style.overflow = \"auto\";\n        }\n        setShowNav(shouldShow)\n        console.log(showNav)\n    }\n\n\n    //hide alertBox\n    const hidelert = () => {\n        setAlert(false)\n    }\n\n    //filter by material type\n     const handleSearch = (event) => {\n      let value = event.target.value.toLowerCase()\n      let result = []\n      console.log(value)\n      result = products.filter((data) => {\n          return data.material.toLowerCase().search(value) != -1;\n      })\n      setFilteredProduct(result);\n     }\n\n\n    return (\n        <>\n        {alert && <SweetAlert\n            title={\"You cannot select more items\"}\n            onCancel={hidelert}\n            onConfirm={hidelert}>\n            </SweetAlert>}\n            <NavBar remove={removeItem} showNav={showNav} displayNav={displayNav} increment={increment} decrement={decrement} number={cartItems.length} items={filteredProduct.filter(product => isInCart(product.id)).map(product => addCountToProduct(product))} />\n            <div className=\"container py-5\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h1 className=\"main-weight\">All Products</h1>\n                        <input type=\"text\" className=\"search\" onChange={(event) => handleSearch(event)} placeholder='Search'/>\n\n                    </div>\n                </div>\n            </div>\n            <div className=\"grey-bg\">\n                <div className=\"container-fluid py-5\">\n                    <div className=\"row\">\n                        {filteredProduct.map((item) => {\n            \n                          return <div key={item.id} className=\"col-md-6 col-lg-4 col-sm-6 margin-bottom\">\n                            <div className=\"text-center\">\n                                <img alt=\"product-img\" className=\"img-fluid img-height\" src={item.image} />\n                            </div>\n\n                            <p className=\"text-center title\">{item.name}</p>\n                            <p className=\"text-center\"><span>From</span> ฿{item.price}</p>\n                            <p className=\"text-center title\">Stock: {item.stock}</p>\n                            <p className=\"text-center title\">Material: {item.material}</p>\n              \n                            <p className=\"text-center title\">{dateFormat(item.createdAt, \"dS mmmm, yyyy\")}</p>\n                            \n                            <div className=\"text-center\">\n                                <button disabled={!item.stock} onClick={() => changeShow(item.id)} className=\"button-primary \">Add to Cart</button>\n                            </div>\n                        </div>\n                        }\n                        )}\n\n                    </div>\n                </div>\n            </div>\n         {alert &&  <div className={{position: \"fixed\"}}>\n            <Alert color=\"primary\">\n            This is a primary alert — check it out!\n           </Alert>\n         </div> }\n\n        </>\n    )\n}\n","/Users/USER/AndroidStudioProjects/robot-market/frontend/src/components/navbar/index.js",["112","113","114","115"],"import React from 'react'\nimport \"./index.css\"\nimport Logo from \"../../assets/images/logo-black.png\"\nimport Cart from \"../../assets/images/cart.png\"\nimport Arrow from \"../../assets/images/left-arrow.png\"\nimport X from \"../../assets/images/x.png\"\nimport { Currency } from '../mockdata'\nimport { myCurrency } from '../../store/actions/currency'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { formattedCurrency } from '../../utils'\n\n\n\n\nexport default function NavBar({ number = 0, items, increment, decrement, displayNav, showNav, remove }) {\n\n    const curr = useSelector(state => state.currency);\n\n    const dispatch = useDispatch();\n\n    //Calculate total price\n    const calculateItems = items.reduce((accumulator, current) => accumulator += current.count * current.price, 0)\n\n    return (\n        <>\n            <div className=\"nav-bottom\">\n                <nav className=\"navbar navbar-expand-lg navbar-light nav-container \">\n\n                    <img alt=\"logo\" className=\"img-fluid logo\" src={Logo} />\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto pl-4\">\n                            <li className=\"nav-item active\">\n                                <a className=\"nav-link\">Shop <span className=\"sr-only\">(current)</span></a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\">Learn</a>\n                            </li>\n                        </ul>\n                        <a className=\"nav-link pl-0\">Account</a>\n\n                        <a onClick={() => displayNav(true)} className=\"cart\">\n                            <img alt=\"cart\" className=\"cart-img\" src={Cart} />\n                            <p className=\"cart-p\">{number}</p>\n                        </a>\n                    </div>\n\n\n\n                </nav>\n\n            </div>\n          {showNav &&\n             <span>\n             <div className=\"transparent\"></div>\n         \n                 <div className={showNav ? \"overlay-fixed\" : \"overlay\"}>\n                     <div className=\"pt-3 pl-4 mb-5 pr-5\">\n                         <div className=\"row\">\n                             <div className=\"col-md-6\">\n                                 <button onClick={() => displayNav(false)} type=\"button\" className=\"trans pl-0\">\n                                     <div className=\"button-arrow\">\n                                         <img alt=\"arrow\" className=\"arrow\" src={Arrow} />\n                                     </div>\n                                 </button>\n                             </div>\n                             <div className=\"col-md-6 d-flex align-items-center\">\n                                 <p className=\"cart-text pb-0 mb-0\">YOUR CART</p>\n\n                             </div>\n\n                         </div>\n                         <div className=\"pt-3\">\n                             <select value={curr} onChange={({ target: { value } }) => dispatch(myCurrency(value))} className=\"input-dropdown\">\n                                 {Currency.map((cur) => (\n                                     <option key={cur} value={cur}>{cur}</option>\n                                 ))}\n\n                             </select>\n                         </div>\n                         <div className=\"pt-3\">\n                             {items.map((item) => (\n                                 <div key={item.id} className=\"white-bg mb-4 container-fluid\">\n                                     <div className=\"pt-3 row\">\n                                         <div className=\"col-md-6\">\n                                             <p>{item.title}</p>\n                                         </div>\n                                         <div className=\"col-md-6\">\n                                             <img onClick={() => remove(item.id)} alt=\"cancel\" className=\"img-fluid x-button  float-md-right\" src={X} />\n                                         </div>\n\n                                     </div>\n                                     <div className=\"pb-1 row\">\n                                         <div className=\"col-md-4 pt-5 \">\n                                             <form >\n                                                 <input onClick={() => decrement(item.id)} type='button' value='-' className='qtyminus' field='quantity' />\n                                                 <input type='text' name='quantity' value={item.count} className='qty' />\n                                                 <input onClick={() => increment(item.id, item.stock)} type='button' value='+' className='qtyplus' field='quantity' />\n                                             </form>\n                                         </div>\n                                         <div className=\"col-md-5 pt-5 \">\n                                             <p className=\"price\">฿{formattedCurrency(item.price * item.count)}</p>\n                                         </div>\n                                         <div className=\"col-md-3\">\n                                             <img alt=\"cancel\" className=\"img-fluid url-image float-md-left\" src={item.image} />\n                                         </div>\n\n                                     </div>\n                                 </div>\n                             ))}\n\n                         </div>\n                         <div className=\"pt-5\">\n                             <div className=\"top-border pt-2\">\n                                 <div className=\"row\">\n                                     <div className=\"col-md-6\">\n                                         <p className=\"float-md-left\">Subtotal</p>\n                                     </div>\n                                     <div className=\"col-md-6\">\n                                         <p className=\"float-md-right\">฿{formattedCurrency(calculateItems)}</p>\n                                     </div>\n                                 </div>\n                             </div>\n                         </div>\n                    \n                         <div className=\"pt-4\">\n                             <button className=\"button-solid\">\n                                 PROCEED TO CHECKOUT\n                          </button>\n                         </div>\n                     </div>\n\n                 </div>\n\n         </span>\n\n       }\n             \n         \n        </>\n    )\n}\n","/Users/USER/Robot-Market/frontend/src/index.js",[],["116","117"],"/Users/USER/Robot-Market/frontend/src/App.js",["118"],"/Users/USER/Robot-Market/frontend/src/reportWebVitals.js",[],"/Users/USER/Robot-Market/frontend/src/views/home/index.js",[],"/Users/USER/Robot-Market/frontend/src/components/body/index.js",["119"],"import React from 'react'\nimport \"./index.css\"\nimport axios from 'axios'\nimport { useEffect, useState } from 'react';\nimport NavBar from '../navbar';\nimport dateFormat from 'dateformat';\nimport { Alert } from 'reactstrap';\nimport SweetAlert from 'react-bootstrap-sweetalert';\n\nexport default function Body() {\n\n\n    //Retrieve products from Robot api\n    const getProducts = () =>\n        axios.get('http://localhost:8000/api/robots')\n            .then(products => {\n                setProducts(products.data.data)\n                setFilteredProduct(products.data.data)\n                setLoad(false)\n    }).catch(err => console.log(err))\n\n//     const getProducts = () =>\n//     axios.get('https://laravelapi1.azurewebsites.net/api/products')\n//         .then(products => {\n//             setProducts(products.data.data)\n//             setFilteredProduct(products.data.data)\n//         setLoad(false)\n\n// }).catch(err => console.log(err))\n\n  //Hooks for loader\n  const [load, setLoad] = useState(true)\n\n    //Hooks for products\n    const [products, setProducts] = useState([])\n\n\n    //Hooks to filter products\n    const [filteredProduct, setFilteredProduct] = useState([])\n \n\n    //Call getProducts on initstate\n    useEffect(() => {\n        getProducts()\n    }, [])\n    console.log('data', products)\n    console.log('load', load)\n\n\n\n    //Initialize items in cart\n    const [cartItems, setCartItems] = useState([])\n\n\n    //Initialize a boolean to display Alert\n    const [alert, setAlert] = useState(false)\n\n\n    //Logic to increment count. display navbar and display alert if item count is greater that 5\n    const changeShow = (item) => {\n        if(cartItems.length <= 4 ){\n            increment(item)\n            displayNav(true)\n        } else {\n          setAlert(true)\n        }\n    }\n\n\n    useEffect(() => {\n        console.log('array', cartItems)\n    }, [cartItems])\n\n\n    //Check if cart item to be this ID\n    const isInCart = (id) => {\n        return cartItems.map(a => a.id).includes(id)\n    }\n\n\n    // Add count property to product\n    const addCountToProduct = (product) => {\n        return { ...product, count: cartItems.find(a => a.id === product.id).count }\n    }\n\n\n    //Increment individual cart item\n    const increment = (id, stock) => {\n        if (!isInCart(id)) {\n            setCartItems([...cartItems, { id, count: 1 }])\n        }\n        else {\n            setCartItems(cartItems.map(a => {\n                //if count is less than or equal to stock increment but if count exceeds stock show error\n                    if(a.count + 1 <= stock){\n                        return a.id === id  ? { ...a, count: a.count + 1 } : a\n                    } else {\n                        if(a.id === id ){\n                        setAlert(true)\n                       return  {...a, count: stock }\n                        } else {\n                          return  {...a, count: a.count }\n                        }\n\n                    }\n                       \n            }))\n        }\n    }\n\n\n    //remove item from product\n    const removeItem = (id) => {\n        setCartItems(cartItems.filter(a => a.id !== id))\n    }\n\n\n    //Decrement individual Cart Item\n    const decrement = (id) => {\n        \n        if (isInCart(id)) {\n            const cartItem = cartItems.find(item => item.id === id)\n    \n            if (cartItem.count === 1) {\n                removeItem(id)\n            }\n            else {\n                setCartItems(cartItems.map(a => a.id === id ? { ...a, count: a.count - 1 } : a))\n            }\n        }\n\n    }\n\n\n    const [showNav, setShowNav] = useState(false)\n\n\n    //Display sidebar\n    const displayNav = (shouldShow) => {\n        if (shouldShow) {\n            document.body.style.overflow = \"hidden\";\n        }\n        else {\n            document.body.style.overflow = \"auto\";\n        }\n        setShowNav(shouldShow)\n        console.log(showNav)\n    }\n\n\n    //hide alertBox\n    const hidelert = () => {\n        setAlert(false)\n    }\n\n\n    //filter by material type\n     const handleSearch = (event) => {\n      let value = event.target.value.toLowerCase()\n      let result = []\n      console.log(value)\n      result = products.filter((data) => {\n          return data.name.toLowerCase().search(value) != -1;\n      })\n      setFilteredProduct(result);\n     }\n\n     \n    return (\n        <>\n        {alert && <SweetAlert\n            title={\"You cannot select more items\"}\n            onCancel={hidelert}\n            onConfirm={hidelert}>\n            </SweetAlert>}\n            <NavBar remove={removeItem} showNav={showNav} displayNav={displayNav} increment={increment} decrement={decrement} number={cartItems.length} items={filteredProduct.filter(product => isInCart(product.id)).map(product => addCountToProduct(product))} />\n        \n            <div className=\"container py-5\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h1 className=\"main-weight\">All Products</h1>\n                        <input type=\"text\" className=\"search\" onChange={(event) => handleSearch(event)} placeholder='Search'/>\n\n                    </div>\n                </div>\n            </div>\n            <div style={{textAlign:'capitalize'}} className=\"grey-bg\">\n            { load ? <div>Loading....</div> : <div className=\"container-fluid py-5\">\n                    <div className=\"row\">\n                        {filteredProduct.map((item) => {\n            \n                          return <div key={item.id} className=\"col-md-6 col-lg-4 col-sm-6 margin-bottom\">\n                            <div className=\"text-center\">\n                                <img alt=\"product-img\" className=\"img-fluid img-height\" src={item.image} />\n                            </div>\n\n                            <p style={{textTransform:'capitalize'}}  className=\"text-center title\">{item.name}</p>\n                            <p className=\"text-center\"><span>From</span> £{item.price}</p>\n                            <p className=\"text-center title\">Stock: {item.stock}</p>\n                            {/* <p className=\"text-center title\">Material: {item.material}</p> */}\n              \n                            <p className=\"text-center title\">{dateFormat(item.createdAt, \"dS mmmm, yyyy\")}</p>\n                            \n                            <div className=\"text-center\">\n                                <button disabled={!item.stock} onClick={() => changeShow(item.id)} className=\"button-primary\">Add to Cart</button>\n                            </div>\n                        </div>\n                        }\n                        )}\n\n                    </div>\n                </div>}\n            </div>\n          \n           \n             \n         {alert &&  <div className={{position: \"fixed\"}}>\n            <Alert color=\"primary\">\n            This is a primary alert — check it out!\n           </Alert>\n         </div> }\n\n        </>\n    )\n}\n","/Users/USER/Robot-Market/frontend/src/utils.js",[],"/Users/USER/Robot-Market/frontend/src/components/navbar/index.js",["120","121","122","123"],"/Users/USER/Robot-Market/frontend/src/components/mockdata/index.js",[],["124","125"],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":12},{"ruleId":"126","replacedBy":"134"},{"ruleId":"128","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":37,"column":33,"nodeType":"138","endLine":37,"endColumn":57},{"ruleId":"136","severity":1,"message":"137","line":40,"column":33,"nodeType":"138","endLine":40,"endColumn":57},{"ruleId":"136","severity":1,"message":"137","line":43,"column":25,"nodeType":"138","endLine":43,"endColumn":54},{"ruleId":"136","severity":1,"message":"137","line":45,"column":25,"nodeType":"138","endLine":45,"endColumn":78},{"ruleId":"130","severity":1,"message":"139","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":27},{"ruleId":"140","severity":1,"message":"141","line":146,"column":60,"nodeType":"142","messageId":"143","endLine":146,"endColumn":62},{"ruleId":"136","severity":1,"message":"137","line":37,"column":33,"nodeType":"138","endLine":37,"endColumn":57},{"ruleId":"136","severity":1,"message":"137","line":40,"column":33,"nodeType":"138","endLine":40,"endColumn":57},{"ruleId":"136","severity":1,"message":"137","line":43,"column":25,"nodeType":"138","endLine":43,"endColumn":54},{"ruleId":"136","severity":1,"message":"137","line":45,"column":25,"nodeType":"138","endLine":45,"endColumn":78},{"ruleId":"126","replacedBy":"144"},{"ruleId":"128","replacedBy":"145"},{"ruleId":"130","severity":1,"message":"131","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":12},{"ruleId":"140","severity":1,"message":"141","line":163,"column":56,"nodeType":"142","messageId":"143","endLine":163,"endColumn":58},{"ruleId":"136","severity":1,"message":"137","line":36,"column":33,"nodeType":"138","endLine":36,"endColumn":57},{"ruleId":"136","severity":1,"message":"137","line":39,"column":33,"nodeType":"138","endLine":39,"endColumn":57},{"ruleId":"136","severity":1,"message":"137","line":42,"column":25,"nodeType":"138","endLine":42,"endColumn":54},{"ruleId":"136","severity":1,"message":"137","line":44,"column":25,"nodeType":"138","endLine":44,"endColumn":78},{"ruleId":"126","replacedBy":"146"},{"ruleId":"128","replacedBy":"147"},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["148"],["149"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'formattedCurrency' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["148"],["149"],["148"],["149"],"no-global-assign","no-unsafe-negation"]